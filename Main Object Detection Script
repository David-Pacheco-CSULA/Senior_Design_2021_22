# OBJECT DETECTION COURSE

#                               IMPORTED DOCUMENTS 
# 'coco.names'                List of typical object used in a typical object detection code
# 'weightsPath.pb'            Weights given to each of the objects from 'coco.names'
# 'configurationPath.pbtxt'   The configuration path of the objects found in the 'coco.names' list

import cv2
from cv2 import VideoCapture

cap = cv2.VideoCapture(0)                          # => Captures images from my webcam 

# Bottom two lines change width(3) and height(4) 
cap.set(3,640) 
cap.set(4,480)

className = []                                     # => Making an empty array
classFile = 'coco.names'                           # => Variable containing the contains of the named file
with open(classFile, 'rt') as f:                   # => Opening the coco.names file (List of names specifically for Object Dection)
    className = f.read().rstrip('\n').split('\n')  # => defining 'className'(1)Reading coco.names, (2)Removing trailing char '\n'  
                                                   #   of words, (3)Than spliting the string of words at every '\n' left   
# print(className)                                 # => Left with an array of all the names within 'coco.names'

configPath     = 'configurationPath.pbtxt'         # => Variable containing the contains of the named file
weightsPath    = 'weightsPath.pb'                  # => Variable containing the contains of the named file

net = cv2.dnn_DetectionModel(weightsPath,configPath)             # => Function is provided by openCV that does all the object 
                                                                 #    detection processes for us. We just need to provide the
                                                                 #    function with the weigths and configuration path which 
                                                                 #    we just downloaded from the OpenCV website  

# Following the Parameters set by document found containing the weights and configuration paths
net.setInputSize(320,320) 
net.setInputScale(1.0/127.5)
net.setInputMean((127.5,127.5,127.5)) 
net.setInputSwapRB(True)

while True: 
    success, img = cap.read()    # => Reads the images from my webcam 
    # => classIds, confs, bbox: All values outputted by the object detection model/function OpenCV provides us 
    # => classIds = List of ids of the objects that were detected in the image 
    # => Confs = List of confidence levels of those objects detected
    # => bbox = List of 4 value coordinates of each of those objects (bounding box)
    classIds, confs, bbox =  net.detect(img,confThreshold = 0.6) # =>'net.detect' detects the chosen image and tries to output 
                                                                #    the closest fit from the 'coco.names' list 
                                                                # => 'confThreshold = 0.5' is a minimum confidence level that must 
                                                                #    be returned for  

    if len(classIds) != 0:                                      # => Only goes thru if something is detected
        # => 'Zip' combines multiple lists into one list. Each variable in that single list is made up of the values from 
        #    those seperate lists. (e.g. (1, 49, [32,45,65,78]) would be a single variable)) this is done for the purposes of
        #    having only a single for loop with all the necessary values instead of one for loop for each list. 
        # => '.flatten()' has to be used to all the lists if you want to zip them 
        # => ClassId, confidence, box are placeholder variables for the values of each of the objects going through the forloop 
       
        for classId, confidence, box in zip(classIds.flatten(), confs.flatten(), bbox): 
            cv2.rectangle(img,box,color=(0,255,0),thickness = 3)
            cv2.putText(img,className[classId - 1].upper(), (box[0]+10,box[1]+50), cv2.FONT_HERSHEY_COMPLEX,1, (0,255,0), thickness = 2)
            cv2.putText(img,str(round(confidence*100,2)), (box[0]+200,box[1]+50), cv2.FONT_HERSHEY_COMPLEX,1, (0,255,0), thickness = 2)

    cv2.imshow("Ouput", img)
    cv2.waitKey(1)
