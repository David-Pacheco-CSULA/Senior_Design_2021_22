# 11/9/2021  FACE DETECTION (ONLY)
# 1) Face Detection using Haar cascades (not the best way to detect faces)
# 2) Face detection is performed using classifiers 
#     A) Classifier: is an algorithm that decides whether a given 
#     image is positive or negative whether a face is present or not
#     B) Classifiers need to be given thousands of pictures to train it 
#     however openCV already comes with a lot of pre trained classifiers
#     C) The two main classifiers are: A) Har cascades & B) Local Binary Patterns (More advanced)
#     D) This code uses a classifier that OpenCV has to detect faces.

import cv2 as cv

img = cv.imread('C:\\Users\\david\\Desktop\\CSULA 2021 Fall\\Senior Design\\Python\\Photos\\group 1.jpg')
cv.imshow('Person', img)

# Face detection doesnt involve skin tone so we need to convert to gray scale
# Haar Cascade uses edges to detect if something is a face or not 
gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
cv.imshow('Gray Person', gray)

# Now we read in the xml pretrained classifier file we made
haar_cascade = cv.CascadeClassifier('C:\\Users\\david\\Desktop\\CSULA 2021 Fall\\Senior Design\\Python\\Classifers_Detection\\haar_face.xml') # Passing the xml file we have that has the classifier into a variable

# Printing 'len(faces_rect)' will give you the number of faces found
# 'faces_rect' is essentially the rectangular coordinates for the faces in the image
faces_rect = haar_cascade.detectMultiScale(gray,scaleFactor=1.1, minNeighbors = 6) # (image, scale factor, number of neighbors a rectangle should have to be called a face)
# The higher the minimum neighbors the more stringent the code will be when determining if something is a face or not so making it more likely that what is detected is a face buttttt....
# that might lead to not being able to detect some faces in a image


print(f'Number of faces found = {len(faces_rect)}')

# Since we know 'faces_rect' is just coordinates we can now print a rectangle over the faces
for(x,y,w,h) in faces_rect:  # Gets the variables in faces_rect
    cv.rectangle(img, (x,y), (x+w, y+h), (0,255,0), thickness = 2)

cv.imshow('Detect Faces', img)

cv.waitKey(0)
